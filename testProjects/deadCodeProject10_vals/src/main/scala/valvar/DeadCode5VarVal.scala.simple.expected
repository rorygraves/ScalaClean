package valvar

object App1 extends App {
  Outer.Inner
  Other.usedVar
  Other.method1()
  Other.method2()
  ()
}

object Outer {

  object Inner {

    var r20      = referred20
    val r21      = referred21
    lazy val r22 = referred22
    /* *** SCALA CLEAN consider rewriting pattern as 4 values are not used */var (_, _, _, (d2, _)) = (1, 2, 3, (4, referred2))
    /* *** SCALA CLEAN consider rewriting pattern as 4 values are not used */val (_, _, _, (d4, _)) = (1, 2, 3, (4, referred4))
    /* *** SCALA CLEAN consider rewriting pattern as 4 values are not used */lazy val (_, _, _, (d6, _)) = (1, 2, 3, (4, referred6))
    println(d2)
    println(d4)
    println(d6)
    println(r20)
    println(r21)
    println(r22)
    ()

  }
  object referred10
  object referred11
  object referred12

  object referred20
  object referred21
  object referred22

  object referred1
  object referred2
  object referred3
  object referred4
  object referred5
  object referred6
}
object Other {
  var usedVar: Int = _
  def method1(): Int = {
    val (a,b,c) = usedMethod1()
    a + b + c
  }
  def method2(): Int = {
    if (true) {
      val x = {
        val (a,b,c) = usedMethod2()
        a + b + c + 3
      }
      x + 1
    } else 22
  }
  def usedMethod1() = (2,3,4)
  def usedMethod2() = (2,3,4)
}
