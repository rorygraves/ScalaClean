package scalaclean.test.references.allOutgoingReferences

class Parent {
  def foo: Unit = ()/* allOutgoingReferences(C:scalaclean.test.references.allOutgoingReferences.Parent/M:foo()) - C:scala.Unit :: P:scala */
}/* allOutgoingReferences(C:scalaclean.test.references.allOutgoingReferences.Parent) - <root> :: C:java.lang.Object :: C:scalaclean.test.references.allOutgoingReferences.Parent/V:<local Parent> :: P:scala :: P:scalaT:AnyRef :: P:scalaclean.test.references.allOutgoingReferences */

class Child extends Parent {
  def bar(x: Any/* allOutgoingReferences(C:scalaclean.test.references.allOutgoingReferences.Child/M:bar(scala.Any)/V:x##1) - C:scala.Any :: P:scala */): Unit = ()/* allOutgoingReferences(C:scalaclean.test.references.allOutgoingReferences.Child/M:bar(scala.Any)) - C:scala.Any :: C:scala.Unit :: P:scala */
}/* allOutgoingReferences(C:scalaclean.test.references.allOutgoingReferences.Child) - C:scalaclean.test.references.allOutgoingReferences.Child/V:<local Child> :: C:scalaclean.test.references.allOutgoingReferences.Parent :: P:scalaclean.test.references.allOutgoingReferences */

object Special {
  def myVar1           = 1/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.Special/M:myVar1()) - C:scala.Int :: P:scala */
  def myVar1_=(i: Int/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.Special/M:myVar1_$eq(scala.Int)/V:i##1) - C:scala.Int :: P:scala */) = ()/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.Special/M:myVar1_$eq(scala.Int)) - C:scala.Int :: C:scala.Unit :: P:scala */

  def myVar2           = 1/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.Special/M:myVar2()) - C:scala.Int :: P:scala */
  def myVar2_=(i: Int/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.Special/M:myVar2_$eq(scala.Int)/V:i##1) - C:scala.Int :: P:scala */) = ()/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.Special/M:myVar2_$eq(scala.Int)) - C:scala.Int :: C:scala.Unit :: P:scala */

  def apply()         = 7/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.Special/M:apply()) - C:scala.Int :: P:scala */
  def unapply(a: Any/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.Special/M:unapply(scala.Any)/V:a##1) - C:scala.Any :: P:scala */) = Some(1, 2)/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.Special/M:unapply(scala.Any)) - <root> :: C:scala.Any :: C:scala.Int :: C:scala.Long :: C:scala.Nothing :: C:scala.SerialVersionUID :: C:scala.Some :: C:scala.SomeT:A :: C:scala.Tuple2 :: C:scala.Tuple2T:T1 :: C:scala.Tuple2T:T2 :: C:scala.specialized :: O:scala.Boolean :: O:scala.Char :: O:scala.Double :: O:scala.Int :: O:scala.Long :: O:scala.Some :: O:scala.Some :: O:scala.Some/M:apply[<none>](scala.Some.A) :: O:scala.Some/M:apply[<none>](scala.Some.A) :: O:scala.Some/M:apply[<none>](scala.Some.A)T:A## :: O:scala.Tuple2 :: O:scala.Tuple2 :: O:scala.Tuple2/M:apply[<none>;<none>](scala.Tuple2.T1;scala.Tuple2.T2) :: O:scala.Tuple2/M:apply[<none>;<none>](scala.Tuple2.T1;scala.Tuple2.T2) :: O:scala.Tuple2/M:apply[<none>;<none>](scala.Tuple2.T1;scala.Tuple2.T2)T:T1## :: O:scala.Tuple2/M:apply[<none>;<none>](scala.Tuple2.T1;scala.Tuple2.T2)T:T2## :: P:scala */

  def update(i: Int/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.Special/M:update(scala.Int;scala.Int)/V:i##1) - C:scala.Int :: P:scala */, j: Int/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.Special/M:update(scala.Int;scala.Int)/V:j##2) - C:scala.Int :: P:scala */) = ()/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.Special/M:update(scala.Int;scala.Int)) - C:scala.Int :: C:scala.Unit :: P:scala */

}/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.Special) - <root> :: C:java.lang.Object :: C:java.lang.Object/M:<init>() :: C:scala.Unit :: O:scalaclean.test.references.allOutgoingReferences.Special/V:<local Special> :: P:java.lang :: P:scala :: P:scalaT:AnyRef :: P:scalaclean.test.references.allOutgoingReferences */

object XX {
  new Child().foo
  new Child().bar(1)

  Special.myVar1 += 1

  Special.myVar2 = 9
  println(Special.myVar2)

  Special()
  val x: Any = 1/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.XX/V:x ) - C:scala.Any :: C:scala.Int :: P:scala */
  x match {
    case i: Int        => ???
    case Special(a, b) => ???
  }

  Special(1) = 7
}/* allOutgoingReferences(O:scalaclean.test.references.allOutgoingReferences.XX) - <root> :: C:java.lang.Object :: C:java.lang.Object/M:<init>() :: C:scala.Any :: C:scala.Any/M:isInstanceOf[<none>]() :: C:scala.Boolean :: C:scala.Boolean/M:unary_$bang() :: C:scala.Int :: C:scala.Int/M:$plus(scala.Int) :: C:scala.Long :: C:scala.MatchError :: C:scala.MatchError/M:<init>(scala.Any) :: C:scala.Nothing :: C:scala.SerialVersionUID :: C:scala.Some :: C:scala.Some/M:isEmpty() :: C:scala.SomeT:A :: C:scala.Tuple2 :: C:scala.Unit :: C:scalaclean.test.references.allOutgoingReferences.Child :: C:scalaclean.test.references.allOutgoingReferences.Child/M:<init>() :: C:scalaclean.test.references.allOutgoingReferences.Child/M:bar(scala.Any) :: C:scalaclean.test.references.allOutgoingReferences.Parent/M:foo() :: O:scala.Predef :: O:scala.Predef/M:$qmark$qmark$qmark() :: O:scala.Predef/M:println(scala.Any) :: O:scalaclean.test.references.allOutgoingReferences.Special :: O:scalaclean.test.references.allOutgoingReferences.Special/M:apply() :: O:scalaclean.test.references.allOutgoingReferences.Special/M:myVar1() :: O:scalaclean.test.references.allOutgoingReferences.Special/M:myVar1_$eq(scala.Int) :: O:scalaclean.test.references.allOutgoingReferences.Special/M:myVar2() :: O:scalaclean.test.references.allOutgoingReferences.Special/M:myVar2_$eq(scala.Int) :: O:scalaclean.test.references.allOutgoingReferences.Special/M:unapply(scala.Any) :: O:scalaclean.test.references.allOutgoingReferences.Special/M:update(scala.Int;scala.Int) :: O:scalaclean.test.references.allOutgoingReferences.XX/M:x() :: O:scalaclean.test.references.allOutgoingReferences.XX/V:<local XX> :: O:scalaclean.test.references.allOutgoingReferences.XX/V:<local XX>/M:case6()## :: O:scalaclean.test.references.allOutgoingReferences.XX/V:<local XX>/M:case7()## :: O:scalaclean.test.references.allOutgoingReferences.XX/V:<local XX>/M:case8()## :: O:scalaclean.test.references.allOutgoingReferences.XX/V:<local XX>/M:matchEnd5(scala.Nothing)## :: O:scalaclean.test.references.allOutgoingReferences.XX/V:<local XX>/V:o9## :: O:scalaclean.test.references.allOutgoingReferences.XX/V:<local XX>/V:x1## :: P:java.lang :: P:scala :: P:scalaT:AnyRef :: P:scalaclean.test.references.allOutgoingReferences :: V:x */
