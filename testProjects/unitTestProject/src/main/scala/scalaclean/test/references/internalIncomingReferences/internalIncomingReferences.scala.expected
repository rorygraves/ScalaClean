package scalaclean.test.references.internalIncomingReferences

class Parent {
  def foo: Unit = ()/* internalIncomingReferences(C:scalaclean.test.references.internalIncomingReferences.Parent/M:foo()) - O:scalaclean.test.references.internalIncomingReferences.XX */
}/* internalIncomingReferences(C:scalaclean.test.references.internalIncomingReferences.Parent) - C:scalaclean.test.references.internalIncomingReferences.Child :: C:scalaclean.test.references.internalIncomingReferences.Child/M:<init>() :: C:scalaclean.test.references.internalIncomingReferences.Parent/M:<init>() */

class Child extends Parent {
  def bar(x: Any): Unit = ()/* internalIncomingReferences(C:scalaclean.test.references.internalIncomingReferences.Child/M:bar(scala.Any)) - O:scalaclean.test.references.internalIncomingReferences.XX */
}/* internalIncomingReferences(C:scalaclean.test.references.internalIncomingReferences.Child) - C:scalaclean.test.references.internalIncomingReferences.Child/M:<init>() :: O:scalaclean.test.references.internalIncomingReferences.XX */

object Special {
  def myVar1           = 1/* internalIncomingReferences(O:scalaclean.test.references.internalIncomingReferences.Special/M:myVar1()) - O:scalaclean.test.references.internalIncomingReferences.XX */
  def myVar1_=(i: Int) = ()/* internalIncomingReferences(O:scalaclean.test.references.internalIncomingReferences.Special/M:myVar1_$eq(scala.Int)) - O:scalaclean.test.references.internalIncomingReferences.XX */

  def myVar2           = 1/* internalIncomingReferences(O:scalaclean.test.references.internalIncomingReferences.Special/M:myVar2()) - O:scalaclean.test.references.internalIncomingReferences.XX */
  def myVar2_=(i: Int) = ()/* internalIncomingReferences(O:scalaclean.test.references.internalIncomingReferences.Special/M:myVar2_$eq(scala.Int)) - O:scalaclean.test.references.internalIncomingReferences.XX */

  def myVar3           = 1
  def myVar3_=(i: Int) = ()/* internalIncomingReferences(O:scalaclean.test.references.internalIncomingReferences.Special/M:myVar3_$eq(scala.Int)) - O:scalaclean.test.references.internalIncomingReferences.XX */

  def myVar4           = 1/* internalIncomingReferences(O:scalaclean.test.references.internalIncomingReferences.Special/M:myVar4()) - O:scalaclean.test.references.internalIncomingReferences.XX */
  def myVar4_=(i: Int) = ()

  def apply()         = 7/* internalIncomingReferences(O:scalaclean.test.references.internalIncomingReferences.Special/M:apply()) - O:scalaclean.test.references.internalIncomingReferences.XX */
  def unapply(a: Any) = Some(1, 2)/* internalIncomingReferences(O:scalaclean.test.references.internalIncomingReferences.Special/M:unapply(scala.Any)) - O:scalaclean.test.references.internalIncomingReferences.XX */

  def update(i: Int, j: Int) = ()/* internalIncomingReferences(O:scalaclean.test.references.internalIncomingReferences.Special/M:update(scala.Int;scala.Int)) - O:scalaclean.test.references.internalIncomingReferences.XX */

}/* internalIncomingReferences(O:scalaclean.test.references.internalIncomingReferences.Special) - O:scalaclean.test.references.internalIncomingReferences.XX */

object XX {
  new Child().foo
  new Child().bar(1)

  Special.myVar1 += 1

  Special.myVar2 = 9
  println(Special.myVar2)

  Special.myVar3 = 9

  println(Special.myVar4)

  Special()
  val x: Any = 1/* internalIncomingReferences(O:scalaclean.test.references.internalIncomingReferences.XX/V:x ) - O:scalaclean.test.references.internalIncomingReferences.XX/M:x() */
  x match {
    case i: Int        => ???
    case Special(a, b) => ???
  }

  Special(1) = 7
}
