package scalaclean.test.references.internalOutgoingReferences

class Parent {
  def foo: Unit = ()
}

class Child extends Parent {
  def bar(x: Any): Unit = ()
}/* internalOutgoingReferences(C:scalaclean.test.references.internalOutgoingReferences.Child) - C:scalaclean.test.references.internalOutgoingReferences.Parent */

object Special {
  def myVar1           = 1
  def myVar1_=(i: Int) = ()

  def myVar2           = 1
  def myVar2_=(i: Int) = ()

  def apply()         = 7
  def unapply(a: Any) = Some(1, 2)

  def update(i: Int, j: Int) = ()

}

object XX {
  new Child().foo
  new Child().bar(1)

  Special.myVar1 += 1

  Special.myVar2 = 9
  println(Special.myVar2)

  Special()
  val x: Any = 1
  x match {
    case i: Int        => ???
    case Special(a, b) => ???
  }

  Special(1) = 7
}/* internalOutgoingReferences(O:scalaclean.test.references.internalOutgoingReferences.XX) - C:scalaclean.test.references.internalOutgoingReferences.Child :: C:scalaclean.test.references.internalOutgoingReferences.Child/M:<init>() :: C:scalaclean.test.references.internalOutgoingReferences.Child/M:bar(scala.Any) :: C:scalaclean.test.references.internalOutgoingReferences.Parent/M:foo() :: C:scalaclean.test.references.internalOutgoingReferences.Special/M:apply() :: C:scalaclean.test.references.internalOutgoingReferences.Special/M:myVar1() :: C:scalaclean.test.references.internalOutgoingReferences.Special/M:myVar1_$eq(scala.Int) :: C:scalaclean.test.references.internalOutgoingReferences.Special/M:myVar2() :: C:scalaclean.test.references.internalOutgoingReferences.Special/M:myVar2_$eq(scala.Int) :: C:scalaclean.test.references.internalOutgoingReferences.Special/M:unapply(scala.Any) :: C:scalaclean.test.references.internalOutgoingReferences.Special/M:update(scala.Int;scala.Int) :: C:scalaclean.test.references.internalOutgoingReferences.XX/M:x() :: O:scalaclean.test.references.internalOutgoingReferences.Special */
